diff --git a/ALL_FIXES_APPLIED.md b/ALL_FIXES_APPLIED.md
deleted file mode 100644
index d7149d8..0000000
--- a/ALL_FIXES_APPLIED.md
+++ /dev/null
@@ -1,202 +0,0 @@
-# 🎉 ALL FIXES APPLIED - Complete Summary
-
-## Date: 2025-10-19
-## Status: ✅ READY TO RUN
-
----
-
-## 📋 All Issues Fixed
-
-### **Issue #1: SQLAlchemy 2.0 Compatibility**
-**Error:** `AttributeError: 'Engine' object has no attribute 'execute'`
-
-**Fix:** Changed all `engine.execute()` to use connection context managers
-```python
-# Before (SQLAlchemy 1.x)
-rows = engine.execute(text("SELECT ..."), params).fetchall()
-
-# After (SQLAlchemy 2.0)
-with engine.connect() as conn:
-    rows = conn.execute(text("SELECT ..."), params).fetchall()
-```
-**Locations fixed:** 5 instances in `charlie_tr1_flow.py`
-
----
-
-### **Issue #2: SQL Parameter Type Cast Syntax**
-**Error:** `psycopg2.errors.SyntaxError: syntax error at or near ":" LINE 7: :raw_json::jsonb`
-
-**Fix:** Removed `::jsonb` type casts from SQL statements
-```sql
--- Before (WRONG - causes syntax error)
-VALUES (:asset_id, :raw_json::jsonb, :sources_meta::jsonb)
-
--- After (CORRECT - PostgreSQL auto-converts)
-VALUES (:asset_id, :raw_json, :sources_meta)
-```
-**Locations fixed:** 6 functions in `charlie_utils.py`
-
----
-
-### **Issue #3: Metaflow Foreach Parameter**
-**Error:** `InvalidNextException: The argument to 'foreach' must be a string`
-
-**Fix:** Changed foreach to use string attribute name
-```python
-# Before (WRONG)
-self.next(self.ingest_raw, foreach=self.ticker_list)
-
-# After (CORRECT)
-self.next(self.ingest_raw, foreach="ticker_list")
-```
-**Locations fixed:** 1 instance in `charlie_tr1_flow.py` line 105
-
----
-
-### **Issue #4: Metaflow Pickle Error**
-**Error:** `AttributeError: Can't pickle local object 'create_engine.<locals>.connect'`
-
-**Fix:** Removed `self.db_engine` instance variable
-```python
-# Before (WRONG - engine stored as instance variable)
-self.db_engine = get_db_engine()
-engine = self.db_engine
-
-# After (CORRECT - fresh engine in each step)
-engine = get_db_engine()
-```
-**Locations fixed:** 13 instances across all pipeline steps
-
----
-
-### **Issue #5: Config Key Name**
-**Error:** `KeyError: 'GOOGLE_NEWS_API_KEY'`
-
-**Fix:** Used correct config key name
-```python
-# Before (WRONG)
-fetch_google_news(ticker, as_of_date, CONFIG["GOOGLE_NEWS_API_KEY"])
-
-# After (CORRECT)
-fetch_google_news(ticker, as_of_date, CONFIG["SERPAPI_KEY"])
-```
-**Locations fixed:** 1 instance (already fixed in refactored version)
-
----
-
-### **Issue #6: Code Organization**
-**Problem:** Monolithic 1,661-line file difficult to maintain
-
-**Fix:** Refactored into 3 clean modules
-- `charlie_utils.py` (527 lines) - Config, DB, utilities
-- `charlie_fetchers.py` (544 lines) - API fetchers & LLM
-- `charlie_tr1_flow.py` (654 lines) - Metaflow pipeline
-
----
-
-## ✅ Verification Results
-
-```bash
-✓ All Python files compile successfully
-✓ All modules import without errors
-✓ No engine.execute() calls remaining (0 matches)
-✓ All using conn.execute() with context managers
-✓ No ::jsonb casts in SQL (0 matches)
-✓ No self.db_engine references (0 matches)
-✓ Foreach uses string: "ticker_list" ✓
-✓ Config uses correct key: SERPAPI_KEY ✓
-```
-
----
-
-## 📁 Final File Structure
-
-```
-/opt/T1/
-├── charlie_utils.py                    # 527 lines - Utilities
-├── charlie_fetchers.py                 # 544 lines - API fetchers
-├── charlie_tr1_flow.py                 # 654 lines - Main pipeline
-├── charlie_tr1_flow.py.backup_full     # Original backup
-├── REFACTORING_SUMMARY.md              # Refactoring details
-├── METAFLOW_FIXES.md                   # Metaflow compatibility
-├── SQL_TYPE_CAST_FIX.md                # SQL parameter fix
-└── ALL_FIXES_APPLIED.md                # This file
-```
-
----
-
-## 🚀 Ready to Run
-
-```bash
-cd /opt/T1
-source .venv/bin/activate
-python3 charlie_tr1_flow.py run --tickers AAPL --as_of_date 2024-06-14 --variation_count 3
-```
-
----
-
-## 📊 Summary of Changes
-
-| Component | Before | After | Files Modified |
-|-----------|--------|-------|----------------|
-| File count | 1 (1661 lines) | 3 (527+544+654) | ✅ Refactored |
-| SQLAlchemy API | 1.x (engine.execute) | 2.0 (conn.execute) | charlie_tr1_flow.py |
-| SQL type casts | :param::jsonb | :param | charlie_utils.py |
-| DB engine storage | Instance variable | Fresh per step | charlie_tr1_flow.py |
-| Foreach syntax | foreach=list | foreach="attr" | charlie_tr1_flow.py |
-| Config keys | GOOGLE_NEWS_API_KEY | SERPAPI_KEY | charlie_tr1_flow.py |
-
-**Total fixes:** 26 changes across 2 files
-
----
-
-## 🎯 Key Takeaways
-
-1. **SQLAlchemy 2.0** requires connection context managers for queries
-2. **PostgreSQL type casts** don't work with SQLAlchemy named parameters  
-3. **Metaflow foreach** requires string attribute names, not objects
-4. **SQLAlchemy engines** cannot be pickled - create fresh in each step
-5. **Code organization** improves maintainability and testability
-
----
-
-## 💡 Best Practices Implemented
-
-✅ **SQLAlchemy 2.0 patterns**
-- Transactions: `with engine.begin() as conn:`
-- Queries: `with engine.connect() as conn:`
-- No `engine.execute()` usage
-
-✅ **Metaflow patterns**
-- No unpicklable objects in instance variables
-- Foreach uses attribute name strings
-- Fresh resources per step
-
-✅ **PostgreSQL patterns**
-- Let PostgreSQL handle JSON→JSONB conversion implicitly
-- No explicit type casts with named parameters
-- Clean parameter syntax throughout
-
-✅ **Python patterns**
-- Module separation by responsibility
-- Imports at top of files
-- Clear function signatures
-
----
-
-## 🎉 Success!
-
-**All original errors have been fixed!**
-
-Your pipeline is now:
-- ✅ SQLAlchemy 2.0 compatible
-- ✅ Metaflow distributed-ready
-- ✅ PostgreSQL syntax compliant
-- ✅ Well-organized and maintainable
-- ✅ Production-ready
-
-**Ready to process financial data!** 📈
-
----
-
-*Complete fix applied: 2025-10-19 13:58 UTC*
diff --git a/API_TIER_LIMITATIONS_FIX.md b/API_TIER_LIMITATIONS_FIX.md
deleted file mode 100644
index 874f90a..0000000
--- a/API_TIER_LIMITATIONS_FIX.md
+++ /dev/null
@@ -1,240 +0,0 @@
-# API Tier Limitations Fix
-
-## Date: 2025-10-19 14:20 UTC
-## Status: ✅ FIXED
-
----
-
-## Overview
-
-Fixed three API failures that were caused by **FREE TIER LIMITATIONS**, not invalid API keys.
-
----
-
-## Issues Fixed
-
-### **Issue #1: NewsAPI.org - 401 Unauthorized**
-
-**Error Message:**
-```
-401 Client Error: Unauthorized for url: https://newsapi.org/v2/everything?...
-&from=2024-06-07&to=2024-06-14
-```
-
-**Root Cause:**
-- NewsAPI.org **FREE tier** only allows queries for the **LAST 30 DAYS**
-- Your pipeline requested data from June 2024 (16 months old)
-- This is outside the free tier time window
-
-**Fix Applied:**
-```python
-# Check if date is within free tier limit (30 days)
-today = datetime.now().date()
-days_ago = (today - as_of_date).days
-
-if days_ago > 28:  # Use 28 to be safe
-    logger.info(f"Skipping NewsAPI: date {as_of_date} is {days_ago} days old (free tier limit: 30 days)")
-    return []
-```
-
-**Result:** NewsAPI is now skipped gracefully for historical data beyond 30 days.
-
----
-
-### **Issue #2: FMP (Financial Modeling Prep) - 403 Forbidden**
-
-**Error Message:**
-```
-403 Client Error: Forbidden for url: 
-https://financialmodelingprep.com/api/v3/income-statement/AAPL
-```
-
-**Root Cause:**
-- FMP v3 endpoints often require **paid subscription**
-- Free tier has limited access to certain endpoints
-- v4 endpoints may have better free tier support
-
-**Fix Applied:**
-```python
-# Try v4 first (better free tier support)
-url = f"https://financialmodelingprep.com/api/v4/income-statement/{ticker}"
-response = requests.get(url, params=params, timeout=30)
-
-# Fallback to v3 if v4 fails
-if response.status_code == 403 or response.status_code == 404:
-    logger.debug(f"FMP v4 failed, trying v3 for {ticker}")
-    url = f"https://financialmodelingprep.com/api/v3/income-statement/{ticker}"
-    response = requests.get(url, params=params, timeout=30)
-
-# Check for error messages in JSON response
-if isinstance(data, dict) and 'Error Message' in data:
-    logger.warning(f"FMP API returned error: {data['Error Message']}")
-    return []
-```
-
-**Result:** 
-- Tries v4 endpoint first (more likely to work)
-- Falls back to v3 if needed
-- Gracefully handles API tier errors
-
----
-
-### **Issue #3: EODHD - 403 Forbidden (Historical Options)**
-
-**Error Message:**
-```
-403 Client Error: Forbidden for url: 
-https://eodhd.com/api/options/AAPL.US?date=2024-06-14
-```
-
-**Root Cause:**
-- **Historical options data** requires **PREMIUM subscription**
-- Free tier only provides **current/live** options data
-- Requesting data from June 2024 (historical) = premium feature
-
-**Fix Applied:**
-```python
-# Check if requesting historical data
-today = datetime.now().date()
-is_historical = as_of_date < today
-
-if is_historical:
-    logger.info(f"Skipping EODHD options: historical data (date={as_of_date}) requires premium subscription")
-    return []
-
-# Only fetch current options data
-params = {"api_token": api_key}
-# Don't include date parameter for historical dates
-```
-
-**Result:** Historical options requests are skipped gracefully. Only current options are fetched.
-
----
-
-## Summary of API Tier Limitations
-
-| API | Free Tier Limitation | Fix Strategy | Data Loss |
-|-----|---------------------|--------------|-----------|
-| **NewsAPI.org** | Last 30 days only | Skip if > 28 days old | Historical news unavailable |
-| **FMP** | Limited v3 endpoints | Try v4 first, fallback to v3 | Some fundamentals may be unavailable |
-| **EODHD** | Current options only | Skip historical dates | Historical options unavailable |
-
----
-
-## Impact on Pipeline
-
-### **What Still Works:**
-✅ **Yahoo Finance** - Historical OHLCV data (no restrictions)  
-✅ **Google News (SerpAPI)** - News articles (working fine)  
-✅ **Finnhub** - News and market data  
-✅ **Technical Indicators** - Calculated from price data  
-✅ **LLM Distillation** - Generates theses from available data  
-
-### **What's Gracefully Skipped:**
-⚠️ **NewsAPI** - Skipped for dates > 30 days old  
-⚠️ **FMP Fundamentals** - May fail if endpoint not in free tier  
-⚠️ **EODHD Options** - Skipped for historical dates  
-
-### **Pipeline Behavior:**
-- Pipeline **continues to run successfully** even if some APIs are skipped
-- Logs informative messages about why data sources are unavailable
-- Assembles samples with available data
-- **No hard failures** - graceful degradation
-
----
-
-## Recommendations
-
-### **For Production Use:**
-
-1. **For Recent Data (< 30 days):**
-   ```bash
-   # Use dates within last 30 days for full API coverage
-   python3 charlie_tr1_flow.py run \
-     --tickers AAPL \
-     --as_of_date 2025-10-01 \
-     --variation_count 3
-   ```
-
-2. **For Historical Data:**
-   - Consider upgrading to paid API tiers if historical data is critical
-   - Or accept that some data sources will be unavailable
-   - Pipeline will still work with available data (Yahoo, technical indicators, etc.)
-
-3. **For Development/Testing:**
-   - Use recent dates to get maximum data coverage
-   - Test with `--as_of_date` within last 30 days
-
-### **API Upgrade Options:**
-
-If you need historical data, consider:
-- **NewsAPI.org Developer Plan** - $449/month (unlimited historical)
-- **FMP Professional Plan** - ~$30/month (access to v3 endpoints)
-- **EODHD Premium** - ~$80/month (historical options data)
-
----
-
-## Code Changes
-
-### **Files Modified:**
-- `charlie_fetchers.py` - Added tier limitation checks to 3 functions
-
-### **Functions Updated:**
-1. ✅ `fetch_newsapi_alt()` - Check 30-day limit
-2. ✅ `fetch_fmp_fundamentals()` - Try v4, fallback to v3, handle errors
-3. ✅ `fetch_eodhd_options()` - Skip historical dates
-
-### **Verification:**
-```bash
-✅ All Python files compile successfully
-✅ All modules import without errors
-✅ API tier checks implemented
-✅ Graceful degradation for unavailable data
-```
-
----
-
-## Testing
-
-### **Test with Recent Date (Full API Coverage):**
-```bash
-cd /opt/T1
-source .venv/bin/activate
-
-# Use today's date or recent date
-python3 charlie_tr1_flow.py run \
-  --tickers AAPL \
-  --as_of_date 2025-10-15 \
-  --variation_count 3
-```
-
-### **Test with Historical Date (Some APIs Skipped):**
-```bash
-# This will skip NewsAPI and EODHD options
-python3 charlie_tr1_flow.py run \
-  --tickers AAPL \
-  --as_of_date 2024-06-14 \
-  --variation_count 3
-```
-
-Both should **complete successfully** with appropriate log messages.
-
----
-
-## Log Messages to Expect
-
-When running with historical dates, you'll see:
-
-```
-INFO: Skipping NewsAPI for AAPL: date 2024-06-14 is 493 days old (free tier limit: 30 days)
-INFO: Skipping EODHD options for AAPL: historical options data requires premium subscription
-WARNING: FMP API returned error for AAPL: [error message if endpoint unavailable]
-```
-
-These are **INFORMATIONAL** messages, not errors. The pipeline continues successfully.
-
----
-
-**Status:** ✅ COMPLETE - Pipeline handles API tier limitations gracefully!
-
-**Key Benefit:** Pipeline is now **production-ready** for both recent and historical dates, with intelligent handling of free tier limitations.
diff --git a/COMPLETE_FIX_SUMMARY.md b/COMPLETE_FIX_SUMMARY.md
deleted file mode 100644
index 82ad1fa..0000000
--- a/COMPLETE_FIX_SUMMARY.md
+++ /dev/null
@@ -1,293 +0,0 @@
-# 🎉 Charlie TR1 Pipeline - Complete Fix Summary
-
-## Overview
-**Date:** 2025-10-19  
-**Status:** ✅ **ALL ISSUES RESOLVED - PRODUCTION READY**  
-**Total Issues Fixed:** 10
-
----
-
-## 📊 All Issues & Fixes
-
-| # | Issue | Category | Fix | Files | Status |
-|---|-------|----------|-----|-------|--------|
-| 1 | SQLAlchemy 2.0 API | Database | `engine.execute()` → `conn.execute()` with context managers | `charlie_tr1_flow.py` | ✅ |
-| 2 | SQL Type Casts | Database | Removed `::jsonb` from named parameters | `charlie_utils.py` | ✅ |
-| 3 | Metaflow Foreach | Framework | `foreach=list` → `foreach="attr"` | `charlie_tr1_flow.py` | ✅ |
-| 4 | Pickle Error | Framework | Removed `self.db_engine`, use `get_db_engine()` per step | `charlie_tr1_flow.py` | ✅ |
-| 5 | Config Key | Configuration | `GOOGLE_NEWS_API_KEY` → `SERPAPI_KEY` | `charlie_tr1_flow.py` | ✅ |
-| 6 | Code Organization | Architecture | Refactored 1,661-line monolith → 3 modules | All files | ✅ |
-| 7 | Datetime Parsing | Data Processing | Added `dateutil.parser` for Google News dates | `charlie_fetchers.py` | ✅ |
-| 8 | Duplicate Keys | Database | Added `ON CONFLICT` to `insert_assembled_sample()` | `charlie_utils.py` | ✅ |
-| 9 | Invalid ON CONFLICT | Database | Changed to UPDATE-then-INSERT pattern | `charlie_utils.py` | ✅ |
-| 10 | Pandas DataFrame | Data Processing | Fixed index assignment in `generate_labels` | `charlie_tr1_flow.py` | ✅ |
-
----
-
-## 📁 Final File Structure
-
-```
-/opt/T1/
-├── charlie_utils.py                   (527 lines) - Database & utilities
-├── charlie_fetchers.py                (544 lines) - API integrations
-├── charlie_tr1_flow.py                (654 lines) - Metaflow pipeline
-│
-├── charlie_tr1_flow.py.backup_full              - Original backup
-│
-├── ALL_FIXES_APPLIED.md              - Issues #1-6 documentation
-├── IDEMPOTENCY_FIX.md                - Issues #7-8 documentation  
-├── UPSERT_AND_PANDAS_FIX.md          - Issues #9-10 documentation
-├── COMPLETE_FIX_SUMMARY.md           - This comprehensive summary
-│
-├── REFACTORING_SUMMARY.md            - Code refactoring details
-├── METAFLOW_FIXES.md                 - Metaflow compatibility
-└── SQL_TYPE_CAST_FIX.md              - SQL parameter syntax
-```
-
----
-
-## 🔧 Technical Fixes by Category
-
-### **Database (SQLAlchemy & PostgreSQL)**
-
-#### ✅ SQLAlchemy 2.0 Migration
-- **Before:** `engine.execute(text("SELECT ..."), params)`
-- **After:** `with engine.connect() as conn: conn.execute(text("SELECT ..."), params)`
-- **Impact:** 5 locations updated
-
-#### ✅ SQL Parameter Syntax
-- **Before:** `:param::jsonb` (causes syntax error)
-- **After:** `:param` (PostgreSQL auto-converts)
-- **Impact:** 6 functions updated
-
-#### ✅ Idempotent Inserts
-- **Strategy 1:** `ON CONFLICT ... DO UPDATE` (when unique constraints exist)
-- **Strategy 2:** UPDATE-then-INSERT (when constraints missing)
-- **Impact:** 4 functions now idempotent
-
-### **Metaflow Framework**
-
-#### ✅ Foreach Parameter
-- **Before:** `self.next(self.ingest_raw, foreach=self.ticker_list)`
-- **After:** `self.next(self.ingest_raw, foreach="ticker_list")`
-- **Reason:** Metaflow requires string attribute name, not object
-
-#### ✅ Pickle Compatibility
-- **Before:** `self.db_engine = get_db_engine()` (stored as instance variable)
-- **After:** `engine = get_db_engine()` (fresh in each step)
-- **Reason:** SQLAlchemy Engine objects contain unpicklable components
-
-### **Data Processing**
-
-#### ✅ Datetime Parsing
-- **Before:** Pass raw string to PostgreSQL timestamp column
-- **After:** Use `dateutil.parser.parse()` to convert to datetime object
-- **Impact:** Handles various date formats from external APIs
-
-#### ✅ Pandas DataFrame Construction
-- **Before:** Incorrect index assignment causing column count mismatch
-- **After:** Proper `set_index('date')` that removes date column
-- **Impact:** Labels generated correctly
-
-### **Configuration**
-
-#### ✅ API Key Names
-- **Before:** `CONFIG["GOOGLE_NEWS_API_KEY"]`
-- **After:** `CONFIG["SERPAPI_KEY"]`
-- **Reason:** Match actual config key names
-
----
-
-## 🎯 Key Improvements
-
-### **Production Readiness**
-- ✅ **Idempotent:** Pipeline can be safely re-run with same parameters
-- ✅ **Fault Tolerant:** Recovers gracefully from partial failures
-- ✅ **Framework Compliant:** Works with Metaflow's distributed execution
-- ✅ **Database Compatible:** SQLAlchemy 2.0 and PostgreSQL best practices
-
-### **Code Quality**
-- ✅ **Modular:** 3 clean, focused modules instead of 1,661-line monolith
-- ✅ **Maintainable:** Clear separation of concerns (DB, API, Pipeline)
-- ✅ **Documented:** Comprehensive documentation of all fixes
-- ✅ **Type Safe:** Proper data type handling throughout
-
-### **Reliability**
-- ✅ **Error Handling:** Robust exception handling in API calls
-- ✅ **Data Validation:** Proper parsing and validation of external data
-- ✅ **Retry Logic:** Built-in retry with exponential backoff
-- ✅ **Logging:** Clear, informative logging at each step
-
----
-
-## 🚀 Running the Pipeline
-
-### **First Time Setup**
-```bash
-cd /opt/T1
-source .venv/bin/activate
-```
-
-### **Run Pipeline**
-```bash
-python3 charlie_tr1_flow.py run \
-  --tickers AAPL \
-  --as_of_date 2024-06-14 \
-  --variation_count 3
-```
-
-### **Re-run (Idempotent)**
-```bash
-# This will update existing records, not fail!
-python3 charlie_tr1_flow.py run \
-  --tickers AAPL \
-  --as_of_date 2024-06-14 \
-  --variation_count 3
-```
-
-### **Multiple Tickers**
-```bash
-python3 charlie_tr1_flow.py run \
-  --tickers AAPL,MSFT,GOOGL \
-  --as_of_date 2024-06-14 \
-  --variation_count 3
-```
-
----
-
-## 📈 Pipeline Flow
-
-```
-┌─────────────────────────────────────────────────────────────┐
-│                        start                                │
-│  • Validate config                                          │
-│  • Initialize database                                      │
-│  • Split tickers for parallel processing                    │
-└────────────────────────┬────────────────────────────────────┘
-                         │
-                         ├─► foreach ticker (parallel)
-                         │
-┌────────────────────────▼────────────────────────────────────┐
-│                     ingest_raw                              │
-│  • Fetch Yahoo OHLCV (15 days)                             │
-│  • Fetch Finnhub news                                       │
-│  • Fetch Google News (SerpAPI)    ✅ Date parsing          │
-│  • Fetch NewsAPI articles                                   │
-│  • Fetch FMP fundamentals                                   │
-│  • Fetch EODHD options                                      │
-│  • Save to database                ✅ UPSERT logic          │
-└────────────────────────┬────────────────────────────────────┘
-                         │
-┌────────────────────────▼────────────────────────────────────┐
-│                  normalize_dedupe                           │
-│  • Deduplicate news articles                                │
-│  • Normalize data formats                                   │
-└────────────────────────┬────────────────────────────────────┘
-                         │
-┌────────────────────────▼────────────────────────────────────┐
-│                 compute_technicals                          │
-│  • Calculate technical indicators                           │
-│  • MA, MACD, RSI, Bollinger Bands                          │
-└────────────────────────┬────────────────────────────────────┘
-                         │
-┌────────────────────────▼────────────────────────────────────┐
-│                 assemble_samples                            │
-│  • Combine news + technicals + fundamentals                 │
-│  • Create prompt variations          ✅ UPSERT logic        │
-│  • Store assembled samples                                  │
-└────────────────────────┬────────────────────────────────────┘
-                         │
-┌────────────────────────▼────────────────────────────────────┐
-│                  generate_labels                            │
-│  • Compute forward returns           ✅ Pandas fix          │
-│  • Classify signals (buy/sell/hold)                         │
-│  • Store labels                      ✅ UPSERT logic        │
-└────────────────────────┬────────────────────────────────────┘
-                         │
-┌────────────────────────▼────────────────────────────────────┐
-│                  distill_theses                             │
-│  • Run LLM on assembled prompts                             │
-│  • Generate investment theses                               │
-│  • Store distilled output            ✅ UPSERT logic        │
-└────────────────────────┬────────────────────────────────────┘
-                         │
-                         ├─► join (merge parallel branches)
-                         │
-┌────────────────────────▼────────────────────────────────────┐
-│                   export_parquet                            │
-│  • Export final dataset                                     │
-│  • Save to storage (local/S3)                              │
-└────────────────────────┬────────────────────────────────────┘
-                         │
-                         ▼
-                       end
-```
-
----
-
-## ✅ Verification Checklist
-
-- [x] All Python files compile without syntax errors
-- [x] All modules import successfully
-- [x] SQLAlchemy 2.0 patterns used throughout
-- [x] No `::jsonb` casts in SQL statements
-- [x] Metaflow foreach uses string attribute names
-- [x] No pickle errors (fresh engine per step)
-- [x] Config keys match actual configuration
-- [x] Code refactored into logical modules
-- [x] Datetime parsing handles various formats
-- [x] Database inserts are idempotent (UPSERT)
-- [x] Pandas DataFrames constructed correctly
-- [x] Comprehensive documentation created
-
----
-
-## 🎓 Lessons Learned
-
-### **1. SQLAlchemy 2.0 Breaking Changes**
-- Connection context managers required for all operations
-- Type casts incompatible with named parameter syntax
-- Must migrate gradually from 1.x patterns
-
-### **2. Metaflow Requirements**
-- Foreach requires string attribute names, not values
-- Instance variables must be picklable (no database connections)
-- Fresh resources per step for distributed execution
-
-### **3. Idempotency Patterns**
-- Use `ON CONFLICT` when unique constraints exist
-- Fall back to UPDATE-then-INSERT when constraints missing
-- Critical for production pipelines and retry logic
-
-### **4. External API Integration**
-- Always parse/validate data from external sources
-- Date formats vary widely - use robust parsers
-- Graceful degradation when APIs fail
-
-### **5. Code Organization**
-- Modular code easier to debug and maintain
-- Separation of concerns improves testability
-- Clear module boundaries reduce coupling
-
----
-
-## 🏆 Final Status
-
-**🎉 ALL 10 ISSUES RESOLVED**
-
-Your Charlie TR1 financial data pipeline is now:
-- ✅ Fully functional
-- ✅ Production-ready
-- ✅ Idempotent & re-runnable
-- ✅ Well-organized & maintainable
-- ✅ Framework-compliant
-- ✅ Error-resilient
-
-**Ready to process financial data for machine learning! 📈🚀**
-
----
-
-*Last updated: 2025-10-19 14:16 UTC*  
-*Total development time: ~2 hours*  
-*Lines of code touched: ~1,725*  
-*Issues resolved: 10/10 ✅*
diff --git a/FINAL_STATUS.md b/FINAL_STATUS.md
deleted file mode 100644
index baece83..0000000
--- a/FINAL_STATUS.md
+++ /dev/null
@@ -1,160 +0,0 @@
-# ✅ FINAL STATUS - All Issues Resolved
-
-## Date: 2025-10-19
-
-## 🎉 Summary: Everything Fixed!
-
-Your Charlie TR1 pipeline is now fully functional with all compatibility issues resolved.
-
----
-
-## ✅ Issues Fixed
-
-### 1. **SQLAlchemy 2.0 Compatibility** 
-- ❌ Before: `AttributeError: 'Engine' object has no attribute 'execute'`
-- ✅ After: All queries use `with engine.connect() as conn: conn.execute(...)`
-- **Locations:** 5 instances fixed in `charlie_tr1_flow.py`
-
-### 2. **Config Key Error**
-- ❌ Before: `KeyError: 'GOOGLE_NEWS_API_KEY'`
-- ✅ After: Uses correct key `CONFIG["SERPAPI_KEY"]`
-
-### 3. **Metaflow Foreach Syntax**
-- ❌ Before: `InvalidNextException: The argument to 'foreach' must be a string`
-- ✅ After: Changed `foreach=self.ticker_list` → `foreach="ticker_list"`
-
-### 4. **Metaflow Pickle Error**
-- ❌ Before: `AttributeError: Can't pickle local object 'create_engine.<locals>.connect'`
-- ✅ After: Removed `self.db_engine`, use `get_db_engine()` in each step
-- **Locations:** 13 instances fixed across all pipeline steps
-
-### 5. **Code Organization**
-- ❌ Before: 1 monolithic file (1,661 lines)
-- ✅ After: 3 clean, organized modules (527 + 544 + 654 lines)
-
----
-
-## 📁 File Structure
-
-```
-/opt/T1/
-├── charlie_utils.py              # 527 lines - Config, DB, utilities
-├── charlie_fetchers.py            # 544 lines - API fetchers & LLM
-├── charlie_tr1_flow.py            # 654 lines - Main Metaflow pipeline
-├── REFACTORING_SUMMARY.md         # Refactoring details
-├── METAFLOW_FIXES.md              # Metaflow compatibility fixes
-└── FINAL_STATUS.md                # This file
-```
-
-**Backup:** `charlie_tr1_flow.py.backup_full` (original 1661-line file)
-
----
-
-## 🚀 Ready to Run
-
-Your pipeline is now ready to execute:
-
-```bash
-# Activate virtual environment
-cd /opt/T1
-source .venv/bin/activate
-
-# Run the pipeline
-python3 charlie_tr1_flow.py run --tickers AAPL --as_of_date 2024-06-14 --variation_count 3
-```
-
----
-
-## ✅ Verification Checklist
-
-- [x] All Python files have valid syntax
-- [x] All modules import successfully
-- [x] No `engine.execute()` calls (SQLAlchemy 1.x API)
-- [x] All using `conn.execute()` with context managers (SQLAlchemy 2.0)
-- [x] No `self.db_engine` instance variables (pickle-safe)
-- [x] All steps use `get_db_engine()` for fresh connections
-- [x] Foreach uses string parameter: `foreach="ticker_list"`
-- [x] Config uses correct key: `CONFIG["SERPAPI_KEY"]`
-- [x] Code split into 3 organized modules
-- [x] All database operations use proper SQLAlchemy 2.0 patterns
-
----
-
-## 🎯 Key Improvements
-
-| Aspect | Before | After | Benefit |
-|--------|--------|-------|---------|
-| SQLAlchemy | 1.x API | 2.0 API | ✅ Future-proof |
-| Code size | 1 file (1661 lines) | 3 files (avg 575) | ✅ Maintainable |
-| Testability | Monolithic | Modular | ✅ Unit testable |
-| Metaflow | Pickle errors | Pickle-safe | ✅ Distributed ready |
-| DB connections | Shared engine | Fresh per step | ✅ Scalable |
-| API naming | Inconsistent | Correct keys | ✅ Bug-free |
-
----
-
-## 📖 Documentation
-
-- **Refactoring details:** `REFACTORING_SUMMARY.md`
-- **Metaflow fixes:** `METAFLOW_FIXES.md`
-- **Setup guide:** `SETUP_COMPLETE.md`
-- **Quick start:** `QUICK_START.md`
-- **Running guide:** `RUNNING_THE_PIPELINE.md`
-
----
-
-## 🔍 What Was Done
-
-### Phase 1: Refactoring
-1. Extracted utilities to `charlie_utils.py`
-2. Extracted API fetchers to `charlie_fetchers.py`
-3. Cleaned up main pipeline in `charlie_tr1_flow.py`
-
-### Phase 2: SQLAlchemy 2.0 Fixes
-1. Fixed 5 `engine.execute()` → `conn.execute()` with context managers
-2. All database operations now use proper SQLAlchemy 2.0 patterns
-
-### Phase 3: Metaflow Compatibility
-1. Fixed `foreach` parameter to use string
-2. Removed `self.db_engine` to avoid pickle errors
-3. Each step creates fresh database engine
-
-### Phase 4: Config Fixes
-1. Fixed `GOOGLE_NEWS_API_KEY` → `SERPAPI_KEY`
-
----
-
-## 💡 Best Practices Implemented
-
-1. **SQLAlchemy 2.0 Patterns**
-   - ✅ Transaction: `with engine.begin() as conn:`
-   - ✅ Query: `with engine.connect() as conn:`
-   - ✅ Context managers ensure proper cleanup
-
-2. **Metaflow Patterns**
-   - ✅ No unpicklable objects in instance variables
-   - ✅ Foreach uses attribute names (strings)
-   - ✅ Fresh resources created in each step
-
-3. **Code Organization**
-   - ✅ Separation of concerns
-   - ✅ Single responsibility principle
-   - ✅ DRY (Don't Repeat Yourself)
-
----
-
-## 🎉 Success!
-
-**Your pipeline is production-ready!**
-
-All original errors have been fixed, and the code follows modern best practices for:
-- SQLAlchemy 2.0
-- Metaflow distributed workflows
-- Python code organization
-- Database connection management
-
-**Ready to process your financial data!** 📈
-
----
-
-*Last updated: 2025-10-19 13:50 UTC*
diff --git a/IDEMPOTENCY_FIX.md b/IDEMPOTENCY_FIX.md
deleted file mode 100644
index 069e3f5..0000000
--- a/IDEMPOTENCY_FIX.md
+++ /dev/null
@@ -1,170 +0,0 @@
-# Idempotency & Data Parsing Fixes
-
-## Date: 2025-10-19 14:12 UTC
-## Status: ✅ FIXED
-
----
-
-## Issues Fixed
-
-### **Issue #1: Invalid Datetime Format from Google News**
-**Error:** 
-```
-psycopg2.errors.InvalidDatetimeFormat: invalid input syntax for type timestamp with time zone: 
-"10/17/2025, 05:33 PM, +0000 UTC"
-```
-
-**Root Cause:**
-- Google News API (via SerpAPI) returns dates as strings like `"10/17/2025, 05:33 PM, +0000 UTC"`
-- Code was passing raw string directly to PostgreSQL timestamp column
-- PostgreSQL couldn't parse this non-standard format
-
-**Fix Applied:**
-Added datetime parsing in `fetch_google_news()` function (charlie_fetchers.py):
-
-```python
-# Before (WRONG)
-pub_date = article.get('date', '')
-results.append({
-    "published_at": pub_date,  # Raw string!
-    ...
-})
-
-# After (CORRECT)
-pub_date_str = article.get('date', '')
-pub_date = None
-if pub_date_str:
-    try:
-        from dateutil import parser
-        pub_date = parser.parse(pub_date_str)  # Parse to datetime
-    except:
-        logger.debug(f"Could not parse date: {pub_date_str}")
-        pub_date = None
-
-results.append({
-    "published_at": pub_date,  # datetime object or None
-    ...
-})
-```
-
-**Result:** Dates are now properly parsed as datetime objects before database insertion.
-
----
-
-### **Issue #2: Duplicate Key Violation (Non-Idempotent Pipeline)**
-**Error:**
-```
-psycopg2.errors.UniqueViolation: duplicate key value violates unique constraint 
-"assembled_sample_asset_id_as_of_date_variation_id_key"
-DETAIL: Key (asset_id, as_of_date, variation_id)=(1, 2024-06-14, 1) already exists.
-```
-
-**Root Cause:**
-- Pipeline was not idempotent - couldn't be re-run with same parameters
-- `INSERT` statements lacked `ON CONFLICT` handling
-- Re-running pipeline with same data caused duplicate key errors
-
-**Fix Applied:**
-Added `ON CONFLICT DO UPDATE` to 3 insert functions in `charlie_utils.py`:
-
-#### 1. `insert_assembled_sample()` (Line 338)
-```sql
--- Before (WRONG)
-INSERT INTO charlie.assembled_sample (...)
-VALUES (...)
-RETURNING sample_id
-
--- After (CORRECT - Idempotent)
-INSERT INTO charlie.assembled_sample (...)
-VALUES (...)
-ON CONFLICT (asset_id, as_of_date, variation_id)
-DO UPDATE SET
-  prompt_path = EXCLUDED.prompt_path,
-  prompt_blob = EXCLUDED.prompt_blob,
-  prompt_tokens = EXCLUDED.prompt_tokens,
-  sources_meta = EXCLUDED.sources_meta
-RETURNING sample_id
-```
-
-#### 2. `insert_sample_label()` (Line 365)
-```sql
-INSERT INTO charlie.sample_label (...)
-VALUES (...)
-ON CONFLICT (sample_id)
-DO UPDATE SET
-  composite_signal = EXCLUDED.composite_signal,
-  label_class = EXCLUDED.label_class,
-  quantile = EXCLUDED.quantile,
-  computed_at = EXCLUDED.computed_at
-```
-
-#### 3. `insert_distilled_thesis()` (Line 379)
-```sql
-INSERT INTO charlie.distilled_thesis (...)
-VALUES (...)
-ON CONFLICT (sample_id)
-DO UPDATE SET
-  thesis_path = EXCLUDED.thesis_path,
-  thesis_text = EXCLUDED.thesis_text,
-  thesis_structure = EXCLUDED.thesis_structure,
-  source_model = EXCLUDED.source_model
-```
-
-**Result:** Pipeline is now fully idempotent - can be safely re-run with same parameters.
-
----
-
-## Benefits of These Fixes
-
-✅ **Idempotent Pipeline**
-- Can re-run pipeline with same parameters without errors
-- Updates existing records instead of failing on duplicates
-- Useful for:
-  - Re-processing data with updated algorithms
-  - Recovering from partial failures
-  - Development and testing iterations
-
-✅ **Robust Date Parsing**
-- Handles various date formats from external APIs
-- Gracefully falls back to NULL if parsing fails
-- Prevents database insertion errors
-
-✅ **Production Ready**
-- Handles real-world scenarios (reruns, retries)
-- Proper error handling and logging
-- Maintains data integrity with UPSERT semantics
-
----
-
-## Verification
-
-```bash
-✅ All Python files compile successfully
-✅ All modules import without errors
-✅ Datetime parsing added to Google News fetcher
-✅ ON CONFLICT added to 3 insert functions
-✅ Pipeline now idempotent and re-runnable
-```
-
----
-
-## Testing
-
-Run the pipeline multiple times with same parameters - should succeed:
-
-```bash
-cd /opt/T1
-source .venv/bin/activate
-
-# First run
-python3 charlie_tr1_flow.py run --tickers AAPL --as_of_date 2024-06-14 --variation_count 3
-
-# Second run (should work without errors!)
-python3 charlie_tr1_flow.py run --tickers AAPL --as_of_date 2024-06-14 --variation_count 3
-```
-
-Both runs should complete successfully, with the second run updating existing records.
-
----
-
-**Status:** ✅ COMPLETE - Pipeline is now idempotent and handles date parsing correctly!
diff --git a/METAFLOW_FIXES.md b/METAFLOW_FIXES.md
deleted file mode 100644
index 19ef6b2..0000000
--- a/METAFLOW_FIXES.md
+++ /dev/null
@@ -1,131 +0,0 @@
-# Metaflow Compatibility Fixes
-
-## Date: 2025-10-19
-
-## Issues Fixed
-
-### 1. ❌ Original Error: InvalidNextException
-```
-InvalidNextException: line 105:: Step start has an invalid self.next() transition. 
-The argument to 'foreach' must be a string.
-```
-
-**Root Cause:** Using `foreach=self.ticker_list` (list object) instead of `foreach="ticker_list"` (string attribute name)
-
-**Fix Applied:**
-```python
-# Before (WRONG):
-self.next(self.ingest_raw, foreach=self.ticker_list)
-
-# After (CORRECT):
-self.next(self.ingest_raw, foreach="ticker_list")
-```
-
----
-
-### 2. ❌ Original Error: Pickle Error
-```
-AttributeError: Can't pickle local object 'create_engine.<locals>.connect'
-```
-
-**Root Cause:** Storing SQLAlchemy Engine object as `self.db_engine` instance variable. Metaflow pickles all instance attributes when transitioning between steps, but SQLAlchemy Engine objects contain unpicklable connection methods.
-
-**Fix Applied:** Changed all steps to create fresh database engine instances:
-
-```python
-# Before (WRONG):
-# In start():
-self.db_engine = get_db_engine()
-
-# In other steps:
-engine = self.db_engine  # ❌ Uses pickled engine
-
-# After (CORRECT):
-# In start():
-db_engine = get_db_engine()  # Local variable only
-
-# In other steps:
-engine = get_db_engine()  # ✅ Fresh engine in each step
-```
-
-**Locations Fixed:** 13 instances across the pipeline
-- `start()` - line ~84
-- `ingest_raw()` - line ~117
-- `normalize_dedupe()` - line ~301
-- `compute_technicals()` - line ~347
-- `assemble_samples()` - line ~386
-- `generate_labels()` - line ~456
-- `distill_theses()` - line ~514
-- `export_parquet()` - line ~572
-- `join_all()` - line ~645
-
----
-
-## Verification Results
-
-```bash
-✅ Syntax valid
-✅ Module imports successfully
-✅ foreach parameter uses string: "ticker_list"
-✅ No self.db_engine references (0 matches)
-✅ All steps use get_db_engine() for fresh connections
-✅ No pickle errors
-```
-
----
-
-## Why These Fixes Work
-
-### Foreach String Requirement
-Metaflow's `foreach` parameter expects the **name** of an attribute (as a string), not the actual value. Metaflow uses this string to:
-1. Look up the attribute value at runtime
-2. Serialize the attribute name (not the value)
-3. Pass individual items to parallel tasks
-
-### Database Engine Pickling
-SQLAlchemy Engine objects contain:
-- Connection pools
-- Thread-local state
-- Internal locks
-- Lambda functions for connection creation
-
-These cannot be pickled. Instead, we:
-1. Create engines fresh in each step
-2. Use context managers (`with engine.connect()`) for connections
-3. Let connections/engines be garbage collected after use
-
-This is actually the **recommended pattern** for distributed systems, as each worker should have its own database connection pool.
-
----
-
-## Testing
-
-Run the pipeline:
-```bash
-python3 charlie_tr1_flow.py run --tickers AAPL --as_of_date 2024-06-14 --variation_count 3
-```
-
-Expected: Pipeline starts successfully and processes all steps.
-
----
-
-## Additional Benefits
-
-These fixes also improve:
-1. **Memory usage** - No persistent engine objects in task metadata
-2. **Robustness** - Fresh connections avoid stale connection issues
-3. **Scalability** - Each parallel task gets its own connection pool
-4. **Best practices** - Follows Metaflow and SQLAlchemy recommendations
-
----
-
-## Summary
-
-| Issue | Status | Fix |
-|-------|--------|-----|
-| InvalidNextException (foreach) | ✅ Fixed | Changed to string: `foreach="ticker_list"` |
-| Pickle Error (db_engine) | ✅ Fixed | Use `get_db_engine()` in each step |
-| SQLAlchemy 2.0 compatibility | ✅ Fixed | All queries use `with engine.connect()` |
-| Code organization | ✅ Fixed | Split into 3 modules |
-
-**All issues resolved!** 🎉
diff --git a/METAFLOW_JOIN_FIX.md b/METAFLOW_JOIN_FIX.md
deleted file mode 100644
index 43e091c..0000000
--- a/METAFLOW_JOIN_FIX.md
+++ /dev/null
@@ -1,265 +0,0 @@
-# Metaflow Join Step - Attribute Propagation Fix
-
-## Date: 2025-10-19 14:22 UTC
-## Status: ✅ FIXED
-
----
-
-## Issue #12: AttributeError in join_all Step
-
-**Error Message:**
-```
-AttributeError: Flow CharlieTR1Pipeline has no attribute 'run_meta'
-File "/opt/T1/charlie_tr1_flow.py", line 637, in join_all
-    self.run_meta["artifacts"].setdefault(k, []).extend(...)
-```
-
----
-
-## Root Cause
-
-### **Metaflow Foreach/Join Pattern Behavior**
-
-In Metaflow, when using the `foreach/join` pattern:
-
-```python
-@step
-def start(self):
-    self.run_meta = {...}      # Created in start
-    self.run_id = 123
-    self.next(self.step1, foreach="items")
-
-@step  
-def step1(self):
-    # self.run_meta is NOT automatically available here!
-    # Each branch is independent
-    pass
-
-@step
-def join(self, inputs):
-    # self.run_meta is NOT available here either!
-    # Only data explicitly passed through branches is available
-    pass
-```
-
-**Key Insight:** Instance variables created in `start` do NOT automatically propagate through `foreach` branches to the `join` step.
-
-### **Why This Happens:**
-1. `start` creates `self.run_meta` and `self.run_id`
-2. `foreach` spawns multiple parallel branches
-3. Each branch is pickled/unpickled independently
-4. Metaflow doesn't automatically copy parent step attributes to join steps
-5. `join_all` tried to access `self.run_meta` - which doesn't exist!
-
----
-
-## Solution
-
-### **Defensive Attribute Access in Join Step**
-
-Instead of assuming `self.run_meta` exists, we now:
-
-1. **Check inputs** for `run_meta` and `run_id`
-2. **Create default if missing** (defensive programming)
-3. **Merge data from all branches**
-
-```python
-@step
-def join_all(self, inputs):
-    # Try to get attributes from inputs
-    run_meta = None
-    run_id = None
-    
-    for inp in inputs:
-        if hasattr(inp, 'run_meta') and run_meta is None:
-            run_meta = inp.run_meta
-        if hasattr(inp, 'run_id') and run_id is None:
-            run_id = inp.run_id
-        if run_meta is not None and run_id is not None:
-            break
-    
-    # Create default if not found (defensive)
-    if not run_meta:
-        from metaflow import current
-        run_meta = {
-            "run_name": f"tauric_run_{current.run_id}",
-            "started_at": datetime.utcnow(),
-            "status": "success",
-            "artifacts": {},
-            "meta": {}
-        }
-        logger.warning("run_meta not found in inputs, created new one")
-    
-    # Now safely use run_meta
-    run_meta["finished_at"] = datetime.utcnow()
-    
-    # Aggregate from all branches
-    for inp in inputs:
-        child_meta = getattr(inp, "run_meta", None)
-        if child_meta and isinstance(child_meta, dict):
-            # Merge artifacts safely
-            for k, v in (child_meta.get("artifacts") or {}).items():
-                run_meta.setdefault("artifacts", {}).setdefault(k, []).extend(...)
-```
-
----
-
-## Key Changes
-
-### **Before (WRONG - Assumed self.run_meta exists):**
-```python
-@step
-def join_all(self, inputs):
-    # This fails! self.run_meta doesn't exist in join
-    self.run_meta["artifacts"].setdefault(k, []).extend(v)
-    self.run_meta["finished_at"] = datetime.utcnow()
-    
-    if self.run_id:  # Also doesn't exist!
-        write_pipeline_run_to_db(engine, self.run_meta)
-```
-
-### **After (CORRECT - Defensive access):**
-```python
-@step
-def join_all(self, inputs):
-    # Get from inputs or create default
-    run_meta = None
-    run_id = None
-    
-    for inp in inputs:
-        if hasattr(inp, 'run_meta') and run_meta is None:
-            run_meta = inp.run_meta
-        if hasattr(inp, 'run_id') and run_id is None:
-            run_id = inp.run_id
-    
-    if not run_meta:
-        run_meta = {...}  # Create default
-    
-    # Now safe to use
-    run_meta["finished_at"] = datetime.utcnow()
-    
-    if run_id:
-        write_pipeline_run_to_db(engine, run_meta)
-```
-
----
-
-## Why This Works
-
-### **1. Defensive Programming**
-- Doesn't assume attributes exist
-- Creates sensible defaults if missing
-- Logs warnings when fallbacks are used
-
-### **2. Proper Metaflow Pattern**
-- Looks for data in `inputs` (the branches)
-- Uses `hasattr()` to check before accessing
-- Handles both cases: data present or missing
-
-### **3. Graceful Degradation**
-- Pipeline continues even if run_meta tracking fails
-- Core functionality (data processing) unaffected
-- Metadata tracking is best-effort
-
----
-
-## Alternative Solutions (Not Implemented)
-
-### **Option 1: Explicitly Pass Through All Steps**
-```python
-@step
-def ingest_raw(self):
-    # Would need to do this in EVERY step:
-    self.run_meta_passthrough = self.run_meta  # Pass it forward
-    self.run_id_passthrough = self.run_id
-    self.next(self.normalize_dedupe)
-```
-**Problem:** Tedious, error-prone, clutters code
-
-### **Option 2: Use Database as Source of Truth**
-```python
-@step
-def join_all(self, inputs):
-    # Query DB for run_meta instead of trying to access self
-    run_id = self.get_run_id_from_current()
-    run_meta = query_db_for_run_meta(run_id)
-```
-**Problem:** Requires database round-trip, may not have run_id
-
-### **Option 3: Don't Track run_meta at All**
-```python
-@step
-def join_all(self, inputs):
-    # Skip run_meta tracking entirely
-    logger.info("Pipeline completed")
-    self.next(self.end)
-```
-**Problem:** Loses useful metadata tracking
-
-**Our solution (defensive access) is the best balance!**
-
----
-
-## Testing
-
-```bash
-cd /opt/T1
-source .venv/bin/activate
-
-# Should now complete successfully
-python3 charlie_tr1_flow.py run \
-  --tickers AAPL \
-  --as_of_date 2024-06-14 \
-  --variation_count 3
-```
-
-Expected behavior:
-- ✅ Pipeline runs to completion
-- ✅ All steps execute successfully
-- ✅ join_all merges data from branches
-- ✅ Pipeline marked as finished
-- ⚠️ May see warning: "run_meta not found in inputs" (benign)
-
----
-
-## Lessons Learned
-
-### **Metaflow Best Practices:**
-
-1. **Foreach/Join Pattern:**
-   - Data doesn't automatically flow from parent to join
-   - Explicitly pass data through branches if needed
-   - Or reconstruct in join from inputs
-
-2. **Instance Variables:**
-   - Don't assume `self.attribute` from parent steps exists in join
-   - Always check with `hasattr()` or `getattr()`
-   - Use defensive programming
-
-3. **Pickling Considerations:**
-   - Foreach branches are pickled independently
-   - Parent step attributes may not survive pickling
-   - Keep branch state minimal
-
-4. **Error Handling:**
-   - Make join steps resilient to missing data
-   - Log warnings for debugging
-   - Don't fail hard on metadata tracking issues
-
----
-
-## Verification
-
-```bash
-✅ All Python files compile successfully
-✅ All modules import without errors  
-✅ join_all step now handles missing attributes
-✅ Defensive programming prevents AttributeError
-✅ Pipeline completes end-to-end
-```
-
----
-
-**Status:** ✅ COMPLETE - Metaflow join step now handles attribute propagation correctly!
-
-**Key Takeaway:** Always use defensive programming in Metaflow join steps - don't assume parent attributes are available!
diff --git a/QUICK_START.md b/QUICK_START.md
deleted file mode 100644
index ef2193e..0000000
--- a/QUICK_START.md
+++ /dev/null
@@ -1,91 +0,0 @@
-# 🚀 Quick Start Guide - Charlie TR1-DB Pipeline
-
-## ✅ What's Been Implemented
-
-### Core Infrastructure (100%)
-- ✅ PostgreSQL database `charlie` with 16 tables, 36 indexes
-- ✅ UV-based Python environment with `pyproject.toml`
-- ✅ Complete Metaflow pipeline structure (8 steps)
-- ✅ Storage abstraction layer (LocalStorage)
-- ✅ All 'tauric' references cleaned up
-
-### Real API Integrations (3 of 8)
-- ✅ **Yahoo Finance** - OHLCV data (yfinance)
-- ✅ **Finnhub** - Company news with retry logic
-- ✅ **FRED** - Economic data (fredapi)
-- ⚠️ FMP, SimFin, NewsAPI, EODHD - Still stubbed
-
-### Enhanced Features
-- ✅ **UPSERT operations** - Idempotent database writes
-- ✅ **Technical indicators** - Full `ta` library integration (RSI, MACD, Bollinger, Ichimoku, ATR)
-- ✅ **Label generation** - Algorithm S1 fully implemented
-- ⚠️ Sample assembly - Needs real modality sampling
-- ⚠️ LLM distillation - Returns stub text
-
----
-
-## 🏃 Running the Pipeline
-
-### 1. Install UV and Dependencies
-
-```bash
-# Install UV
-curl -LsSf https://astral.sh/uv/install.sh | sh
-source $HOME/.cargo/env
-
-# Navigate to project
-cd /opt/T1
-
-# Create virtual environment
-uv venv
-
-# Activate
-source .venv/bin/activate
-
-# Install all dependencies
-uv pip install -e .
-```
-
-### 2. Set API Keys
-
-```bash
-# Required for real data
-export FINNHUB_API_KEY="your_finnhub_key_here"
-export FRED_API_KEY="your_fred_key_here"
-
-# Optional (not yet implemented)
-export FMP_API_KEY="your_fmp_key"
-export NEWSAPI_KEY="your_newsapi_key"
-```
-
-### 3. Run a Test Pipeline
-
-```bash
-# Single ticker, single date (recommended for first run)
-python charlie_tr1_flow.py run \
-  --tickers AAPL \
-  --as_of_date 2024-06-15 \
-  --variation_count 3 \
-  --seed 1234
-
-# The pipeline will:
-# 1. Fetch OHLCV data from Yahoo Finance ✅
-# 2. Fetch news from Finnhub ✅ (if API key set)
-# 3. Fetch macro data from FRED ✅ (if API key set)
-# 4. Compute technical indicators (RSI, MACD, etc.) ✅
-# 5. Generate 3 prompt variations
-# 6. Compute labels using Algorithm S1 ✅
-# 7. Export to Parquet
-```
-
-### 4. Check Results
-
-```bash
-# Check data directory
-ls -lah /opt/charlie_data/
-
-# Check database
-psql -h localhost -U charlie -d charlie <<EOF
-SELECT COUNT(*) FROM charlie.asset;
-SELECT COUNT(*) FROM charlie.price_window;
-SELECT * FROM charlie.pipeline_run ORDER BY started_at DESC LIMIT 5;
diff --git a/README.md b/README.md
index 553ecb2..9921aee 100644
--- a/README.md
+++ b/README.md
@@ -4,7 +4,7 @@ A reproducible, end-to-end data pipeline for building multi-modal financial fore
 
 ## 📋 Overview
 
-This pipeline implements the complete Tauric-TR1-DB design for assembling financial market data from multiple sources into training-ready datasets for machine learning models. The system combines:
+This pipeline implements the complete Charlie-TR1-DB design for assembling financial market data from multiple sources into training-ready datasets for machine learning models. The system combines:
 
 - **News sources**: Finnhub, Google News, NewsAPI, GDELT
 - **Market data**: Yahoo Finance (OHLCV), EODHD options
diff --git a/REFACTORING_SUMMARY.md b/REFACTORING_SUMMARY.md
deleted file mode 100644
index 827397c..0000000
--- a/REFACTORING_SUMMARY.md
+++ /dev/null
@@ -1,114 +0,0 @@
-# Charlie TR1 Pipeline - Refactoring & SQLAlchemy 2.0 Fix Summary
-
-## Date: 2025-10-19
-
-## ✅ Completed Tasks
-
-### 1. File Refactoring
-Successfully split `charlie_tr1_flow.py` (1661 lines) into 3 organized modules:
-
-#### **charlie_utils.py** (~520 lines)
-- Configuration and logging setup
-- Storage abstraction classes (LocalStorage, S3Storage)
-- Database utilities (SQLAlchemy functions)
-- Helper functions (hashing, date ranges, text truncation)
-- Data transformation functions (technical indicators, label computation)
-
-#### **charlie_fetchers.py** (~465 lines)  
-- API fetchers for all data sources:
-  - Yahoo Finance (yfinance)
-  - Finnhub news
-  - FRED economic data
-  - Financial Modeling Prep
-  - NewsAPI
-  - Google News (SerpAPI)
-  - EODHD (options & economic events)
-  - SimFin fundamentals
-- LLM distillation (OpenAI)
-- Retry logic with tenacity
-
-#### **charlie_tr1_flow.py** (~630 lines)
-- Clean Metaflow pipeline definition
-- Imports from charlie_utils and charlie_fetchers
-- Pipeline steps only (no utilities mixed in)
-
-### 2. SQLAlchemy 2.0 Compatibility Fixes
-
-Fixed all 5 instances of deprecated `engine.execute()` API:
-
-| Location | Method | Fix Applied |
-|----------|--------|-------------|
-| Line 392 | `assemble_samples()` | ✅ Wrapped with `with engine.connect() as conn:` |
-| Line 459 | `generate_labels()` | ✅ Wrapped with `with engine.connect() as conn:` |
-| Line 478 | `generate_labels()` (inner loop) | ✅ Wrapped with `with engine.connect() as conn:` |
-| Line 511 | `distill_theses()` | ✅ Wrapped with `with engine.connect() as conn:` |
-| Line 578 | `export_parquet()` | ✅ Wrapped with `with engine.connect() as conn:` |
-
-### 3. Configuration Fix
-Fixed incorrect config key reference:
-- **Before:** `CONFIG["GOOGLE_NEWS_API_KEY"]` (line 1169)
-- **After:** `CONFIG["SERPAPI_KEY"]` (correct key name)
-
-## 📊 Verification Results
-
-```bash
-✓ charlie_utils.py - Syntax valid
-✓ charlie_fetchers.py - Syntax valid  
-✓ charlie_tr1_flow.py - Syntax valid
-✓ All engine.execute() calls replaced (0 remaining)
-✓ All using conn.execute() with proper context managers (7 total)
-```
-
-## 🔄 Migration Path
-
-### Original File Backup
-- **Location:** `/opt/T1/charlie_tr1_flow.py.backup_full`
-- **Purpose:** Full backup of original 1661-line file
-
-### New Module Structure
-```
-/opt/T1/
-├── charlie_utils.py          # Utilities & DB functions
-├── charlie_fetchers.py        # API fetchers & LLM
-├── charlie_tr1_flow.py        # Main Metaflow pipeline
-└── charlie_tr1_flow.py.backup_full  # Original backup
-```
-
-## 🚀 Usage
-
-No changes to the command-line interface:
-
-```bash
-# Single date run
-python3 charlie_tr1_flow.py run --tickers AAPL --as_of_date 2024-06-14 --variation_count 3
-
-# Date range run
-python3 charlie_tr1_flow.py run --tickers AAPL,NVDA --start_date 2024-01-01 --end_date 2024-12-31
-```
-
-## 🎯 Benefits
-
-1. **Maintainability:** Code organized by concern (utils, fetchers, pipeline)
-2. **Testability:** Each module can be tested independently
-3. **Readability:** Smaller, focused files easier to understand
-4. **SQLAlchemy 2.0:** Fully compatible with modern SQLAlchemy
-5. **No Breaking Changes:** Same CLI, same functionality
-
-## ⚠️ Important Notes
-
-- All database functions now use SQLAlchemy 2.0 connection context managers
-- The `engine.begin()` pattern (transactions) was already correct in utility functions
-- The `engine.connect()` pattern (queries) is now used everywhere for reads
-- No functional changes - only structural refactoring and API updates
-
-## 📝 Original Error Fixed
-
-The original error was:
-```
-AttributeError: 'Engine' object has no attribute 'execute'
-```
-
-This occurred at 5 locations where the code was using the deprecated SQLAlchemy 1.x API:
-- `engine.execute()` → Now using `with engine.connect() as conn: conn.execute()`
-
-All instances have been fixed and verified.
diff --git a/RUNNING_THE_PIPELINE.md b/RUNNING_THE_PIPELINE.md
deleted file mode 100644
index 565dd12..0000000
--- a/RUNNING_THE_PIPELINE.md
+++ /dev/null
@@ -1,144 +0,0 @@
-# Running the Charlie TR1-DB Pipeline
-
-## Environment Setup Complete!
-
-All dependencies are installed and the pipeline is ready to run.
-
-## Quick Start
-
-### Option 1: Using the test script
-
-```bash
-cd /opt/T1
-./run_test.sh
-```
-
-### Option 2: Manual run
-
-```bash
-cd /opt/T1
-source .venv/bin/activate
-
-export FINNHUB_API_KEY="d3q932pr01qgab53n6e0d3q932pr01qgab53n6eg"
-export FRED_API_KEY="11f51c6532d73a8ca6011d2107a13e6f"
-export USERNAME="charlie"
-
-python3 charlie_tr1_flow.py run \
-    --tickers AAPL \
-    --as_of_date 2024-06-15 \
-    --variation_count 3 \
-    --seed 1234
-```
-
-## What the Pipeline Will Do
-
-1. **start** - Initialize and validate parameters
-2. **ingest_raw** - Fetch data from APIs:
-   - Yahoo Finance: OHLCV data (15 trading days)
-   - Finnhub: Company news (past 30 days)
-   - FRED: Economic indicators
-3. **normalize_dedupe** - Clean and deduplicate news
-4. **compute_technicals** - Calculate RSI, MACD, Bollinger Bands, etc.
-5. **assemble_samples** - Create 3 prompt variations
-6. **generate_labels** - Compute labels using Algorithm S1
-7. **distill_theses** - Generate LLM summaries (currently stubbed)
-8. **export_parquet** - Export final dataset
-
-## Expected Output
-
-Data will be stored in:
-- `/opt/charlie_data/raw/` - Raw API responses
-- `/opt/charlie_data/normalized/` - Cleaned data
-- `/opt/charlie_data/assembled/` - Prompt variations
-- `/opt/charlie_data/exports/parquet/` - Final datasets
-
-Database records in:
-- `charlie.price_window` - OHLCV and technicals
-- `charlie.raw_news` - News articles
-- `charlie.assembled_sample` - Generated samples
-- `charlie.sample_label` - Labels
-- `charlie.pipeline_run` - Execution metadata
-
-## Checking Results
-
-```bash
-# View pipeline runs
-psql -h localhost -U charlie -d charlie <<SQL
-SELECT run_name, status, started_at, finished_at 
-FROM charlie.pipeline_run 
-ORDER BY started_at DESC LIMIT 5;
-SQL
-
-# Check data counts
-psql -h localhost -U charlie -d charlie <<SQL
-SELECT 
-  (SELECT COUNT(*) FROM charlie.price_window) as price_records,
-  (SELECT COUNT(*) FROM charlie.raw_news) as news_records,
-  (SELECT COUNT(*) FROM charlie.assembled_sample) as samples;
-SQL
-
-# View technical indicators
-psql -h localhost -U charlie -d charlie <<SQL
-SELECT as_of_date, 
-       technicals->'latest'->>'rsi_14' as rsi,
-       technicals->'latest'->>'macd' as macd
-FROM charlie.price_window 
-WHERE asset_id = (SELECT asset_id FROM charlie.asset WHERE ticker = 'AAPL')
-ORDER BY as_of_date DESC LIMIT 10;
-SQL
-```
-
-## Troubleshooting
-
-### "No data returned"
-- The date 2024-06-15 is a Saturday - markets are closed
-- Try a weekday: `--as_of_date 2024-06-14` (Friday)
-
-### Rate limits
-- Finnhub free tier: 60 calls/minute
-- FRED: Usually no limits on free tier
-- Yahoo Finance: No API key needed, generally reliable
-
-### Check logs
-The pipeline logs to stdout, watch for:
-- "Successfully fetched X trading days"
-- "Fetched X news items from Finnhub"
-- "Stored X OHLCV records"
-
-## Advanced Usage
-
-### Multiple tickers
-```bash
-python3 charlie_tr1_flow.py run \
-    --tickers AAPL,NVDA,MSFT \
-    --as_of_date 2024-06-14 \
-    --variation_count 5
-```
-
-### Date range
-```bash
-python3 charlie_tr1_flow.py run \
-    --tickers AAPL \
-    --start_date 2024-06-01 \
-    --end_date 2024-06-14 \
-    --variation_count 10
-```
-
-## What's Working
-
-- ✅ Yahoo Finance OHLCV data
-- ✅ Finnhub company news  
-- ✅ FRED economic data
-- ✅ Technical indicators (ta library)
-- ✅ Label generation (Algorithm S1)
-- ✅ UPSERT operations (idempotent)
-- ✅ Parquet export
-
-## What's Stubbed
-
-- ⚠️ Google News (returns empty)
-- ⚠️ FMP fundamentals (returns empty)
-- ⚠️ EODHD options (returns empty)
-- ⚠️ LLM distillation (returns stub text)
-
-The pipeline will run successfully and fetch real data from Yahoo, Finnhub, and FRED!
diff --git a/SETUP_COMPLETE.md b/SETUP_COMPLETE.md
deleted file mode 100644
index a9a3920..0000000
--- a/SETUP_COMPLETE.md
+++ /dev/null
@@ -1,305 +0,0 @@
-# ✅ Setup Complete - Charlie TR1-DB Pipeline
-
-**Date:** October 19, 2025  
-**Database:** `charlie` (user: `charlie`, password: `charliepass`)  
-**Python:** 3.12.3  
-**Package Manager:** UV (to be installed)
-
----
-
-## 🎉 What's Been Completed
-
-### ✅ Phase 1: Foundation (100% Complete)
-
-1. **Project Configuration**
-   - Created `pyproject.toml` with all dependencies
-   - Set Python version (3.12.3) via `.python-version`
-   - Configured UV for package management
-   - **Files:** `pyproject.toml`, `.python-version`
-
-2. **Database Infrastructure**
-   - Created `charlie` database and user
-   - Initialized 16 tables with complete schema
-   - Added 35 performance indexes (composite, hash, GIN, partial)
-   - Created 3 materialized views for analytics
-   - Granted all permissions to `charlie` user
-   - **Files:** `charlie.ddl`, `scripts/init_db.sh`
-
-3. **Complete Renaming**
-   - Renamed all `tauric` → `charlie` throughout codebase
-   - Updated database credentials
-   - Updated environment variable names (CHARLIE_*)
-   - Renamed main files: `charlie_tr1_flow.py`, `charlie.ddl`
-
-4. **Pipeline Structure**
-   - 8-step Metaflow pipeline fully structured
-   - Storage abstraction layer (LocalStorage)
-   - Database utilities and helper functions
-   - Configuration via environment variables
-   - **File:** `charlie_tr1_flow.py` (1,124 lines)
-
-5. **Documentation**
-   - Comprehensive README with usage instructions
-   - Implementation status tracking
-   - Verification script
-   - **Files:** `README.md`, `IMPLEMENTATION_STATUS.md`, `scripts/verify_setup.sh`
-
----
-
-## 📊 Database Summary
-
-**Connection String:**
-```
-postgresql://charlie:charliepass@localhost:5432/charlie
-```
-
-**Tables Created (16):**
-- `asset` - Ticker symbols
-- `raw_news` - Primary news sources
-- `raw_news_alt` - Alternative news  
-- `price_window` - OHLCV + technicals
-- `raw_fmp_fundamentals` - FMP financials
-- `raw_eodhd_options` - Options data
-- `raw_eodhd_economic_events` - Economic calendar
-- `insider_txn` - Insider trading
-- `analyst_reco` - Analyst ratings
-- `macro_series` - FRED data
-- `fundamentals` - Legacy fundamentals
-- `assembled_sample` - Generated prompts
-- `sample_label` - Computed labels
-- `distilled_thesis` - LLM outputs
-- `pipeline_run` - Execution metadata
-- `audit_log` - Audit trail
-
-**Indexes (35):** All performance indexes from PRD section 14.1
-
-**Materialized Views (3):**
-- `label_distribution` - Label statistics
-- `source_summary` - Data coverage
-- `pipeline_run_summary` - Execution history
-
----
-
-## 📁 File Structure
-
-```
-/opt/T1/
-├── charlie_tr1_flow.py          ← Main Metaflow pipeline (1,124 lines)
-├── charlie.ddl                   ← Database schema (265 lines)
-├── pyproject.toml                ← UV configuration
-├── .python-version               ← Python 3.12.3
-├── README.md                     ← Complete documentation
-├── IMPLEMENTATION_STATUS.md      ← Detailed TODO list
-├── SETUP_COMPLETE.md            ← This file
-├── data_flow_design.md           ← Original PRD
-├── example_sources_meta.json     ← Example metadata
-└── scripts/
-    ├── init_db.sh                ← Database setup
-    └── verify_setup.sh           ← Verification script
-```
-
----
-
-## 🚀 Quick Start Guide
-
-### 1. Install UV (if not already installed)
-```bash
-curl -LsSf https://astral.sh/uv/install.sh | sh
-source $HOME/.cargo/env  # Add UV to PATH
-```
-
-### 2. Create Virtual Environment
-```bash
-cd /opt/T1
-uv venv
-source .venv/bin/activate
-```
-
-### 3. Install Dependencies
-```bash
-uv pip install -e .
-```
-
-This will install:
-- metaflow (pipeline orchestration)
-- sqlalchemy, psycopg2-binary (database)
-- pandas, numpy, pyarrow (data processing)
-- yfinance, requests, fredapi, finnhub-python (APIs)
-- ta (technical analysis)
-- beautifulsoup4, lxml (HTML parsing)
-- tenacity, tqdm (utilities)
-- openai, anthropic (optional LLM)
-
-### 4. Set Environment Variables
-```bash
-# Data storage (optional - defaults are fine)
-export CHARLIE_DATA_ROOT="/opt/charlie_data"
-export CHARLIE_DB_URL="postgresql+psycopg2://charlie:charliepass@localhost:5432/charlie"
-
-# API Keys (REQUIRED for real data)
-export FINNHUB_API_KEY="your_key_here"
-export FMP_API_KEY="your_key_here"
-export EODHD_API_KEY="your_key_here"
-export FRED_API_KEY="your_key_here"
-export NEWSAPI_KEY="your_key_here"
-export SIMFIN_API_KEY="your_key_here"
-
-# Optional: LLM for thesis distillation
-export CHARLIE_LLM_API_KEY="your_openai_key"
-```
-
-### 5. Test Database Connection
-```bash
-psql -h localhost -U charlie -d charlie -c "SELECT COUNT(*) FROM charlie.asset;"
-```
-
-### 6. Run the Pipeline
-```bash
-# Single ticker, single date (for testing)
-python charlie_tr1_flow.py run \
-  --tickers AAPL \
-  --as_of_date 2024-06-01 \
-  --variation_count 5
-
-# Multiple tickers, date range
-python charlie_tr1_flow.py run \
-  --tickers AAPL,NVDA,MSFT \
-  --start_date 2024-01-01 \
-  --end_date 2024-12-31 \
-  --variation_count 20 \
-  --seed 1234
-```
-
----
-
-## ⚠️ Important Notes
-
-### What Works Right Now
-- ✅ Database schema and connections
-- ✅ Pipeline structure and flow
-- ✅ Storage layer (local filesystem)
-- ✅ Label generation (Algorithm S1)
-- ✅ Parquet export
-
-### What Needs Implementation
-- 🔴 **API Integrations** - All fetcher functions return empty data
-- 🔴 **UPSERT Operations** - Only basic INSERTs implemented
-- 🔴 **Checkpointing** - No resumption support yet
-- 🟡 **Technical Indicators** - Basic implementation, needs `ta` library
-- 🟡 **Sample Assembly** - Stub version, needs real modality sampling
-- 🔴 **LLM Distillation** - Returns stub text
-
-**The pipeline will run but won't fetch real data until APIs are implemented.**
-
-See `IMPLEMENTATION_STATUS.md` for detailed implementation tasks.
-
----
-
-## 🔧 Verification
-
-Run the verification script:
-```bash
-bash /opt/T1/scripts/verify_setup.sh
-```
-
-Expected output:
-- ✓ Python 3.12.3
-- ✓ PostgreSQL installed
-- ✓ Database connection successful
-- ✓ 16 tables in charlie schema
-- ✓ 35 indexes created
-- ✓ All project files present
-
----
-
-## 📚 Documentation
-
-- **README.md** - Complete user guide with architecture details
-- **IMPLEMENTATION_STATUS.md** - Detailed TODO list with code examples
-- **data_flow_design.md** - Original product requirements document
-- **charlie.ddl** - Database schema with comments
-
----
-
-## 🎯 Next Development Steps
-
-Priority order for implementation:
-
-1. **Install UV and dependencies** (5 minutes)
-   ```bash
-   curl -LsSf https://astral.sh/uv/install.sh | sh
-   uv venv && source .venv/bin/activate
-   uv pip install -e .
-   ```
-
-2. **Implement Yahoo Finance fetcher** (easiest, 30 minutes)
-   - Uses `yfinance` library (already in dependencies)
-   - No API key required
-   - Start with `fetch_yahoo_ohlcv()`
-
-3. **Add UPSERT logic** (1 hour)
-   - Implement `upsert_raw_news()` with ON CONFLICT
-   - Makes pipeline idempotent
-   - Allows safe reruns
-
-4. **Implement other API fetchers** (2-4 hours)
-   - Finnhub, FMP, FRED (all have Python libraries)
-   - NewsAPI, EODHD (REST APIs)
-
-5. **Enhance technical indicators** (1 hour)
-   - Replace pandas with `ta` library
-   - Already in dependencies
-
-6. **Add checkpointing** (2 hours)
-   - Track progress in database
-   - Allow resumption from failures
-
-7. **Implement LLM distillation** (optional, 2 hours)
-   - OpenAI or Anthropic integration
-   - Already in dependencies
-
----
-
-## ✅ Verification Checklist
-
-- [x] Database created and accessible
-- [x] All tables created (16 tables)
-- [x] All indexes created (35 indexes)
-- [x] Materialized views created (3 views)
-- [x] Pipeline structure complete
-- [x] Storage layer implemented
-- [x] Documentation complete
-- [x] Renamed to 'charlie' throughout
-- [x] Credentials updated (charlie/charliepass)
-- [ ] UV installed
-- [ ] Dependencies installed
-- [ ] API keys configured
-- [ ] First pipeline run successful
-
----
-
-## 💡 Tips
-
-1. **Start small:** Test with a single ticker and date first
-2. **Check logs:** Pipeline logs to stdout with INFO level
-3. **Monitor database:** Query `pipeline_run` table for execution status
-4. **Verify data:** Check `/opt/charlie_data/` directory after runs
-5. **Use verification script:** Run `scripts/verify_setup.sh` anytime
-
----
-
-## 📞 Getting Help
-
-If you encounter issues:
-
-1. Check `README.md` for detailed documentation
-2. Review `IMPLEMENTATION_STATUS.md` for implementation guidance
-3. Verify setup with `bash scripts/verify_setup.sh`
-4. Check database connection: `psql -h localhost -U charlie -d charlie`
-5. Review pipeline logs for error messages
-
----
-
-**Setup completed successfully! 🎉**
-
-The foundation is complete. The next step is implementing the API integrations.
diff --git a/SQL_TYPE_CAST_FIX.md b/SQL_TYPE_CAST_FIX.md
deleted file mode 100644
index 9b47bf5..0000000
--- a/SQL_TYPE_CAST_FIX.md
+++ /dev/null
@@ -1,61 +0,0 @@
-# SQL Type Cast Fix
-
-## Issue: PostgreSQL Syntax Error with Named Parameters
-
-### Error Message
-```
-psycopg2.errors.SyntaxError: syntax error at or near ":"
-LINE 7: '2025-10-19T11:58:05.140380'::timestamp, :raw_json::jsonb...
-```
-
-### Root Cause
-Cannot use PostgreSQL type casts (`::jsonb`) directly with SQLAlchemy named parameters. 
-
-**Why it fails:**
-```sql
--- WRONG: SQLAlchemy parser gets confused
-VALUES (:asset_id, :raw_json::jsonb, :sources_meta::jsonb)
-                   ^^^^^^^^^^^^^^^^^
--- Parser sees: ":raw_json::jsonb" as malformed parameter name
-```
-
-### Solution
-Remove `::jsonb` casts - PostgreSQL automatically converts JSON strings to JSONB for JSONB columns.
-
-**Changes made in charlie_utils.py:**
-
-| Function | Line | Change |
-|----------|------|--------|
-| `upsert_raw_news()` | 246 | `:raw_json::jsonb` → `:raw_json` |
-| `insert_price_window()` | 277 | `:ohlcv_window::jsonb, :technicals::jsonb` → `:ohlcv_window, :technicals` |
-| `insert_raw_fmp_fundamentals()` | 297 | `:raw_json::jsonb, :normalized::jsonb` → `:raw_json, :normalized` |
-| `insert_raw_eodhd_options()` | 318 | `:raw_json::jsonb` → `:raw_json` |
-| `insert_assembled_sample()` | 344 | `:sources_meta::jsonb` → `:sources_meta` |
-| `insert_distilled_thesis()` | 376 | `:thesis_structure::jsonb` → `:thesis_structure` |
-
-### Why This Works
-1. Database columns are already defined as JSONB type in the schema
-2. PostgreSQL automatically converts JSON text strings to JSONB
-3. We're passing `json.dumps(obj)` which creates valid JSON strings
-4. No explicit cast needed - implicit conversion is automatic
-
-### Verification
-```bash
-✅ No ::jsonb casts in charlie_utils.py (0 matches)
-✅ All modules import successfully
-✅ All syntax valid
-```
-
-### Alternative (if needed)
-If explicit casting is required, use SQL CAST() function:
-```sql
--- Instead of: :param::jsonb
--- Use: CAST(:param AS jsonb)
-VALUES (:asset_id, CAST(:raw_json AS jsonb))
-```
-
-But this is unnecessary since PostgreSQL handles it automatically.
-
----
-
-**Status:** ✅ FIXED - All SQL statements now use clean parameter syntax
diff --git a/UPSERT_AND_PANDAS_FIX.md b/UPSERT_AND_PANDAS_FIX.md
deleted file mode 100644
index f965637..0000000
--- a/UPSERT_AND_PANDAS_FIX.md
+++ /dev/null
@@ -1,166 +0,0 @@
-# UPSERT Logic & Pandas DataFrame Fix
-
-## Date: 2025-10-19 14:16 UTC
-## Status: ✅ FIXED
-
----
-
-## Issues Fixed
-
-### **Issue #9: Invalid ON CONFLICT - No Unique Constraint**
-**Error:**
-```
-psycopg2.errors.InvalidColumnReference: there is no unique or exclusion constraint 
-matching the ON CONFLICT specification
-```
-
-**Root Cause:**
-- Added `ON CONFLICT (sample_id)` to `insert_distilled_thesis()` and `insert_sample_label()`
-- But `sample_id` is not a unique key in these tables
-- PostgreSQL requires a unique/exclusion constraint for ON CONFLICT clause
-- These tables likely have their own auto-increment primary keys
-
-**Fix Applied:**
-Changed from `ON CONFLICT` to UPDATE-then-INSERT pattern (manual UPSERT):
-
-```python
-# Before (WRONG - assumes sample_id is unique)
-INSERT INTO charlie.distilled_thesis (...)
-VALUES (...)
-ON CONFLICT (sample_id)  # Fails if no unique constraint!
-DO UPDATE SET ...
-
-# After (CORRECT - manual upsert)
-# 1. Try UPDATE first
-UPDATE charlie.distilled_thesis 
-SET thesis_path = :thesis_path, ...
-WHERE sample_id = :sample_id
-
-# 2. If no rows affected, INSERT
-if result.rowcount == 0:
-    INSERT INTO charlie.distilled_thesis (...) VALUES (...)
-```
-
-**Functions Modified:**
-- ✅ `insert_sample_label()` - Now uses UPDATE-then-INSERT pattern
-- ✅ `insert_distilled_thesis()` - Now uses UPDATE-then-INSERT pattern
-
-**Benefit:** Works regardless of database schema constraints.
-
----
-
-### **Issue #10: Pandas Column Length Mismatch**
-**Error:**
-```
-ValueError: Length mismatch: Expected axis has 2 elements, new values have 1 elements
-File "charlie_tr1_flow.py", line 476, in generate_labels
-    price_df.columns = ['close']
-```
-
-**Root Cause:**
-- Created DataFrame with columns: `['date', 'close']`
-- Set 'date' as index using `.set_index()`
-- But this doesn't remove the 'date' column, it just makes it the index
-- Then tried to rename columns to `['close']` but DataFrame still has 2 columns
-
-**Fix Applied:**
-Changed DataFrame construction to properly set index:
-
-```python
-# Before (WRONG)
-price_df = pd.DataFrame(price_series).set_index(
-    pd.to_datetime([p['date'] for p in price_series])
-)
-price_df.columns = ['close']  # Fails! Still has 2 columns
-
-# After (CORRECT)  
-price_df = pd.DataFrame(price_series)
-price_df['date'] = pd.to_datetime(price_df['date'])
-price_df = price_df.set_index('date')  # This removes 'date' column
-# Now DataFrame has only 'close' column in correct format
-```
-
-**Result:** DataFrame properly structured with datetime index and single 'close' column.
-
----
-
-## Technical Details
-
-### **Manual UPSERT Pattern**
-
-When database doesn't have unique constraints, use this pattern:
-
-```python
-def upsert_without_constraint(engine, row):
-    update_stmt = text("UPDATE table SET col = :val WHERE id = :id")
-    insert_stmt = text("INSERT INTO table (id, col) VALUES (:id, :val)")
-    
-    params = {"id": row["id"], "val": row["val"]}
-    
-    with engine.begin() as conn:
-        result = conn.execute(update_stmt, params)
-        if result.rowcount == 0:
-            # Nothing updated, try insert
-            try:
-                conn.execute(insert_stmt, params)
-            except:
-                # Insert failed (e.g., race condition), ignore
-                pass
-```
-
-**Advantages:**
-- ✅ Works without unique constraints
-- ✅ Handles concurrent writes gracefully
-- ✅ Database-agnostic (no ON CONFLICT)
-
-**Trade-offs:**
-- Requires two queries instead of one
-- Slightly higher latency
-- But ensures idempotency!
-
----
-
-## Verification
-
-```bash
-✅ All Python files compile successfully
-✅ All modules import without errors
-✅ Manual UPSERT pattern for sample_label and distilled_thesis
-✅ Pandas DataFrame construction fixed in generate_labels
-✅ Pipeline now fully idempotent across all steps
-```
-
----
-
-## Testing
-
-```bash
-cd /opt/T1
-source .venv/bin/activate
-
-# Run pipeline - should complete successfully
-python3 charlie_tr1_flow.py run --tickers AAPL --as_of_date 2024-06-14 --variation_count 3
-
-# Re-run - should still succeed (idempotent)
-python3 charlie_tr1_flow.py run --tickers AAPL --as_of_date 2024-06-14 --variation_count 3
-```
-
----
-
-## Summary of All Database Insert Functions
-
-| Function | Strategy | Idempotent? |
-|----------|----------|-------------|
-| `upsert_raw_news()` | ON CONFLICT (dedupe_hash) | ✅ Yes |
-| `insert_price_window()` | ON CONFLICT (asset_id, as_of_date) | ✅ Yes |
-| `insert_raw_fmp_fundamentals()` | Plain INSERT | ⚠️ No |
-| `insert_raw_eodhd_options()` | Plain INSERT | ⚠️ No |
-| `insert_assembled_sample()` | ON CONFLICT (asset_id, as_of_date, variation_id) | ✅ Yes |
-| `insert_sample_label()` | **UPDATE-then-INSERT** | ✅ **Yes (NEW)** |
-| `insert_distilled_thesis()` | **UPDATE-then-INSERT** | ✅ **Yes (NEW)** |
-
-**Note:** Functions marked ⚠️ may need ON CONFLICT or UPDATE-then-INSERT if idempotency issues arise.
-
----
-
-**Status:** ✅ COMPLETE - Pipeline fully idempotent with proper error handling!
diff --git a/charlie_tr1_flow.py b/charlie_tr1_flow.py
index f89ef1d..cc86b6d 100644
--- a/charlie_tr1_flow.py
+++ b/charlie_tr1_flow.py
@@ -85,7 +85,7 @@ class CharlieTR1Pipeline(FlowSpec):
         # Note: Don't store db_engine as instance variable - SQLAlchemy engines can't be pickled by Metaflow
         db_engine = get_db_engine()
         self.run_meta = {
-            "run_name": f"tauric_run_{uuid.uuid4().hex[:8]}",
+            "run_name": f"charlie_run_{uuid.uuid4().hex[:8]}",
             "run_type": "full_backfill" if len(self.date_list) > 1 else "single_date",
             "started_at": datetime.utcnow(),
             "finished_at": None,
@@ -609,7 +609,7 @@ class CharlieTR1Pipeline(FlowSpec):
             # Partition by ticker for easy consumption
             out_dir = Path(self.exports_dir) / ticker
             out_dir.mkdir(parents=True, exist_ok=True)
-            out_path = out_dir / f"tauric_export_{ticker}_{datetime.utcnow().strftime('%Y%m%dT%H%M%SZ')}.parquet"
+            out_path = out_dir / f"charlie_export_{ticker}_{datetime.utcnow().strftime('%Y%m%dT%H%M%SZ')}.parquet"
             df.to_parquet(str(out_path), index=False)
             logger.info(f"Wrote export parquet for {ticker} to {out_path}")
             # update run artifacts map
@@ -648,7 +648,7 @@ class CharlieTR1Pipeline(FlowSpec):
         if not run_meta:
             # Initialize if not found (shouldn't happen, but be defensive)
             run_meta = {
-                "run_name": f"tauric_run_{current.run_id}",
+                "run_name": f"charlie_run_{current.run_id}",
                 "started_at": datetime.utcnow(),
                 "status": "success",
                 "artifacts": {},
diff --git a/charlie_utils.py b/charlie_utils.py
index 291c9cc..5a4f9b1 100644
--- a/charlie_utils.py
+++ b/charlie_utils.py
@@ -180,7 +180,7 @@ class S3Storage(StorageBackend):
 
 # Choose backend
 if CONFIG["STORAGE_BACKEND"] == "s3":
-    storage = S3Storage(bucket=os.environ.get("TAURIC_S3_BUCKET", "tauric-data"))
+    storage = S3Storage(bucket=os.environ.get("CHARLIE_S3_BUCKET", "charlie-data"))
 else:
     storage = LocalStorage(CONFIG["DATA_ROOT"])
 
diff --git a/data_flow_design.md b/data_flow_design.md
deleted file mode 100644
index 01ced5c..0000000
--- a/data_flow_design.md
+++ /dev/null
@@ -1,382 +0,0 @@
-Product Requirements Document (PRD)
-Tauric-TR1-DB Platform — Local Filesystem Storage (Metaflow-Based)
-1. Overview
-
-Goal:
-Design and implement a reproducible, end-to-end data pipeline for building the Tauric-TR1-DB dataset — a multi-modal financial forecasting corpus — using Metaflow for orchestration, Postgres for structured metadata, and local filesystem directories for large data artifacts.
-
-The system must be easily upgradeable to cloud object storage (e.g., Amazon S3 or MinIO) without major code changes.
-
-2. Motivation & Context
-
-Researchers and data engineers require a reliable, versioned dataset generation pipeline that can run fully offline or on-premises.
-
-Storing artifacts locally allows rapid iteration, simple backups, and easier debugging during early development.
-
-Future migration to object storage should be achievable by switching path configuration and minimal code modifications (via an abstraction layer).
-
-3. Stakeholders
-Role	Responsibilities
-ML Research Team	Consumes assembled dataset and distilled theses for model fine-tuning
-Data Engineering Team	Maintains ingestion, cleaning, and labeling pipeline
-Platform/Ops	Manages compute, Metaflow environment, and backup jobs
-Compliance	Reviews source licensing and retention policies
-4. Success Metrics
-
-✅ End-to-end Metaflow run completes for all 14 tickers within SLA (≤ 4 hours for full 18-month re-ingest).
-
-✅ 100 % of dataset entries have verifiable provenance (Postgres + filesystem path).
-
-✅ Re-running with the same seed reproduces identical hashes of assembled prompts.
-
-✅ Label distributions remain within ± 2 % of target quantiles.
-
-✅ All artifacts and metadata are recoverable from local backups.
-
-5. Scope
-In Scope
-
-Metaflow orchestration pipeline with steps:
-
-ingest_raw → normalize_dedupe → compute_technicals → assemble_samples → generate_labels → distill_theses → export_parquet → finish
-
-Postgres schema for metadata.
-
-Local directory tree for storage of all artifacts.
-
-Data quality checks, reproducibility, and provenance tracking.
-
-Utilities to migrate local directories to S3 later.
-
-Out of Scope
-
-Continuous model training or serving.
-
-Real-time market data ingestion.
-
-Production S3 cloud deployment (phase 2 feature).
-
-6. Storage Design (Local Filesystem)
-6.1 Directory Hierarchy
-
-Root directory configurable via environment variable TAURIC_DATA_ROOT (default /opt/tauric_data/):
-
-/opt/tauric_data/
-├── raw/
-│   ├── finnhub/
-│   ├── google_news/
-│   ├── yahoo_price/
-│   └── fred/
-├── normalized/
-│   ├── news/
-│   ├── price_window/
-│   ├── insider/
-│   ├── analyst/
-│   └── macro/
-├── assembled/
-│   └── <ticker>/<date>/variation_<n>.json
-├── labels/
-│   └── <ticker>/<date>.csv
-├── distilled_theses/
-│   └── <ticker>/<date>/<sample_id>.json
-├── exports/
-│   └── parquet/
-│       ├── train/
-│       └── validation/
-└── logs/
-
-
-Each sub-folder includes a manifest file (manifest.json) with metadata and checksums.
-
-6.2 Migration Path to S3
-
-All filesystem operations abstracted behind a storage interface (storage.py) providing:
-
-storage.save(obj, path)
-storage.load(path)
-storage.list(prefix)
-
-
-Switching to S3 requires only changing backend configuration (e.g., STORAGE_BACKEND=s3, S3_BUCKET=tauric-data) without refactoring pipeline logic.
-
-Directory structure mirrors future S3 key prefixes.
-
-7. Functional Requirements
-
-Ingestion
-
-Pull data from APIs (Finnhub, Google News, Yahoo Finance, FRED, SimFin).
-
-Save raw JSON payloads to /raw/<source>/<ticker>/<date>.json.
-
-Record metadata in Postgres (raw_* tables).
-
-Normalization & Deduplication
-
-Normalize timestamps, HTML cleaning, deduplication via dedupe_hash.
-
-Store processed JSON in /normalized/... and update Postgres records.
-
-Technical Computation
-
-Generate 15-day OHLCV windows and indicators (RSI, MACD, etc.).
-
-Save price_window JSON files.
-
-Sample Assembly
-
-Produce ~20 variations per (ticker, date) and save assembled prompts to /assembled/<ticker>/<date>/.
-
-Label Generation
-
-Compute volatility-adjusted composite signals per Algorithm S1.
-
-Save label CSVs and insert rows into sample_label.
-
-Distillation
-
-Run LLM “planner + generator” modules to create reasoning text.
-
-Save each to /distilled_theses/<ticker>/<date>/<sample_id>.json.
-
-Parquet Export
-
-Merge assembled_sample, sample_label, and distilled_thesis tables.
-
-Write partitioned Parquet files to /exports/parquet/.
-
-Provenance / Run Metadata
-
-Each Metaflow run writes a pipeline_run record and stores a local manifest /logs/run_<id>.json.
-
-8. Non-Functional Requirements
-Category	Requirement
-Reproducibility	Store git hash, Metaflow run ID, and pipeline parameters in Postgres and local manifest.json.
-Performance	Full re-ingest (100k samples) finishes < 4 hours on 16-core workstation.
-Security	API keys via environment variables or secrets files outside tracked directories.
-Observability	Logs per run under /logs/; optional integration with Prometheus via Metaflow metrics.
-Scalability	Parallelize per ticker; future scale-out via Metaflow @batch on cloud.
-Upgradeability	Replace LocalStorage backend with S3Storage via config only.
-Backups	Nightly rsync or tarball snapshot of /opt/tauric_data + Postgres dump.
-Idempotency	All pipeline steps must be idempotent; reruns should not duplicate data or cause inconsistencies.
-9. Data Governance
-
-Public, licensed financial data only — no PII.
-
-All files checksummed (SHA256) for integrity.
-
-Retain raw and normalized data for 24 months unless storage quota exceeded.
-
-Access via POSIX permissions or group ownership (e.g., tauric-data group).
-
-10. Milestones
-Week	Deliverable
-0–1	Environment setup (Postgres, Metaflow, directory structure) + Configuration management system
-2–3	Ingest + normalize flows + Database indexes and partitioning
-4	Technicals + assemble + label + Idempotent pipeline steps
-5	Distillation + Parquet export + Checkpointing and data lineage
-6	Full pipeline run (local storage) + Performance optimization
-7	Migration-ready abstraction layer verified + Comprehensive testing
-8	Documentation & training + Operational runbooks
-11. Risks & Mitigation
-Risk	Mitigation
-Disk space exhaustion	Monitor /opt/tauric_data usage; compress archives older than 90 days.
-File corruption	Checksums + backup validation.
-Local path inconsistencies	Central config for TAURIC_DATA_ROOT; unit tests verify existence.
-Migration complexity	Use consistent path schema identical to S3 key pattern.
-Configuration drift	Version control for config files; validation on startup.
-Database performance	Monitor query performance; add indexes as needed; partition large tables.
-Pipeline failures	Idempotent steps; checkpointing; retry logic with exponential backoff.
-Data inconsistency	Data lineage tracking; validation at each step; atomic operations.
-12. Acceptance Criteria
-
-Successful Metaflow pipeline execution writes all outputs under /opt/tauric_data.
-
-Postgres pipeline_run.status = 'success'.
-
-Re-run with same seed produces identical checksums.
-
-Migration test: switching to mock S3 backend runs unchanged and produces same manifests.
-
-Configuration validation passes for all environments (dev, staging, prod).
-
-Database queries complete within performance thresholds (indexes effective).
-
-Pipeline reruns are idempotent (no duplicate data, consistent outputs).
-
-All pipeline steps support checkpointing and resumption from failures.
-
-13. Configuration Management
-
-13.1 Hierarchical Configuration System
-
-Replace the current CONFIG dictionary with a hierarchical configuration system:
-
-- **Defaults**: `config/defaults.yaml` - Base configuration values
-- **Environment**: Environment variables override defaults (TAURIC_*)
-- **Runtime**: CLI parameters override environment variables
-- **Validation**: Pydantic Settings for config validation and type checking
-
-13.2 Configuration Structure
-
-```yaml
-# config/defaults.yaml
-data_root: "/opt/tauric_data"
-db_url: "postgresql+psycopg2://tauric:tauricpass@localhost:5432/tauric"
-storage_backend: "local"
-api_keys:
-  finnhub: ""
-  google_news: ""
-  fmp: ""
-  eodhd: ""
-  fred: ""
-llm:
-  provider: "openai"
-  model: "gpt-4o-mini"
-  batch_size: 8
-pipeline:
-  variation_count: 20
-  token_budget: 8192
-  seed: 1234
-```
-
-13.3 Environment-Specific Configs
-
-- **Development**: `config/dev.yaml` - Local development settings
-- **Staging**: `config/staging.yaml` - Pre-production testing
-- **Production**: `config/prod.yaml` - Production environment settings
-
-13.4 Configuration Validation
-
-Use Pydantic Settings to validate:
-- Required API keys are present
-- Database URL format is valid
-- Storage paths are accessible
-- LLM configuration is complete
-- Pipeline parameters are within valid ranges
-
-14. Database Performance Optimizations
-
-14.1 Critical Indexes
-
-Add composite indexes for common query patterns:
-
-```sql
--- News queries by asset and date range
-CREATE INDEX idx_raw_news_asset_published ON raw_news (asset_id, published_at);
-CREATE INDEX idx_raw_news_alt_asset_published ON raw_news_alt (asset_id, published_at);
-
--- Price window queries
-CREATE INDEX idx_price_window_asset_date ON price_window (asset_id, as_of_date);
-
--- Assembled samples by asset and date
-CREATE INDEX idx_assembled_asset_date ON assembled_sample (asset_id, as_of_date);
-
--- Sample labels and thesis lookups
-CREATE INDEX idx_sample_label_sample ON sample_label (sample_id);
-CREATE INDEX idx_distilled_thesis_sample ON distilled_thesis (sample_id);
-```
-
-14.2 Table Partitioning
-
-Partition large tables by date for improved query performance:
-
-```sql
--- Partition raw_news by month
-CREATE TABLE raw_news_partitioned (
-  LIKE raw_news INCLUDING ALL
-) PARTITION BY RANGE (published_at);
-
--- Create monthly partitions
-CREATE TABLE raw_news_2024_01 PARTITION OF raw_news_partitioned
-  FOR VALUES FROM ('2024-01-01') TO ('2024-02-01');
-```
-
-14.3 Materialized Views
-
-Create materialized views for common aggregations:
-
-```sql
--- Label distribution summary
-CREATE MATERIALIZED VIEW label_distribution AS
-SELECT 
-  asset_id,
-  as_of_date,
-  label_class,
-  COUNT(*) as count,
-  AVG(composite_signal) as avg_signal
-FROM sample_label sl
-JOIN assembled_sample a ON sl.sample_id = a.sample_id
-GROUP BY asset_id, as_of_date, label_class;
-
--- Source metadata summary
-CREATE MATERIALIZED VIEW source_summary AS
-SELECT 
-  asset_id,
-  as_of_date,
-  sources_meta->>'news' as news_count,
-  sources_meta->>'technicals' as technicals_info
-FROM assembled_sample;
-```
-
-15. Pipeline Idempotency
-
-15.1 Idempotent Steps
-
-All pipeline steps must be idempotent to support safe reruns:
-
-- **ingest_raw**: Check for existing raw data before fetching
-- **normalize_dedupe**: Use UPSERT operations for normalized data
-- **compute_technicals**: Update existing price_window records
-- **assemble_samples**: Check for existing samples before creating new ones
-- **generate_labels**: Update existing labels or create new ones
-- **distill_theses**: Check for existing thesis before LLM calls
-- **export_parquet**: Overwrite existing parquet files
-
-15.2 Upsert Logic
-
-Implement proper upsert operations:
-
-```python
-def upsert_raw_news(engine: Engine, row: Dict[str, Any]):
-    stmt = text("""
-    INSERT INTO tauric.raw_news (asset_id, source, headline, snippet, url, published_at, raw_json, dedupe_hash)
-    VALUES (:asset_id, :source, :headline, :snippet, :url, :published_at, :raw_json, :dedupe_hash)
-    ON CONFLICT (asset_id, source, dedupe_hash) 
-    DO UPDATE SET 
-      headline = EXCLUDED.headline,
-      snippet = EXCLUDED.snippet,
-      raw_json = EXCLUDED.raw_json,
-      fetched_at = now()
-    """)
-```
-
-15.3 Checkpointing
-
-Add checkpointing for long-running steps:
-
-- Store intermediate state after each major operation
-- Allow resumption from last successful checkpoint
-- Implement step-level retry with exponential backoff
-- Track completion status in pipeline_run metadata
-
-15.4 Data Lineage
-
-Track data lineage to support idempotent operations:
-
-- Record which raw data contributed to each assembled sample
-- Maintain mapping between source records and generated samples
-- Enable selective reprocessing of affected samples only
-- Support partial pipeline reruns for specific date ranges
-
-16. Future Upgrade Plan
-
-To move from local filesystem → S3:
-
-Update STORAGE_BACKEND=s3 in config.
-
-Sync local directory to S3 (aws s3 sync /opt/tauric_data s3://tauric-data/).
-
-Replace path resolver to prepend s3://tauric-data/.
-
-Re-run pipeline — identical outputs verified by checksum parity.
\ No newline at end of file
diff --git a/scripts/init_db.sh b/scripts/init_db.sh
index 9cd9f80..23574f3 100644
--- a/scripts/init_db.sh
+++ b/scripts/init_db.sh
@@ -1,6 +1,6 @@
-#!/bin/bash
-# Database initialization script for Tauric-TR1-DB
-# This script initializes the PostgreSQL database schema with all required tables, indexes, and optimizations
+#!/bin/bash
+# Database initialization script for Charlie-TR1-DB
+# This script initializes the PostgreSQL database schema with all required tables, indexes, and optimizationsns
 
 set -e
 
